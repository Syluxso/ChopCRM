<?php
module_load_include('inc', basename(__DIR__), basename(__DIR__) . '.vars');

/**
 * Implements hook_menu().
 */
function nytech_todo_menu() {
  $items = [];

  $item = new NyTechMenu(__DIR__);
  $item->path('n/todos');
  $item->title('Todos');
  $item->page_callback('api_todo');
  $item->access_callback(true);
  $items = $item->item($items);

  $item = new NyTechMenu(__DIR__);
  $item->path('todos');
  $item->title('Todos');
  $item->page_callback('screen_todos');
  $item->access_callback('user_is_logged_in');
  $items = $item->item($items);

  $item = new NyTechMenu(__DIR__);
  $item->path('todos/new');
  $item->title('Create Todo');
  $item->page_callback('screen_todo_new');
  $item->access_callback('user_is_logged_in');
  $items = $item->item($items);

  $item = new NyTechMenu(__DIR__);
  $item->path('todos/%/view');
  $item->title('Todo');
  $item->page_callback('screen_todo_view');
  $item->page_arguments([1]);
  $item->access_callback('user_is_todo_author');
  $item->access_arguments([1]);
  $items = $item->item($items);

  $item = new NyTechMenu(__DIR__);
  $item->path('todos/%/update');
  $item->title('Todo');
  $item->page_callback('screen_todo_update');
  $item->page_arguments([1]);
  $item->access_callback('user_is_todo_author');
  $item->access_arguments([1]);
  $items = $item->item($items);

  $item = new NyTechMenu(__DIR__);
  $item->path('api/v1/todos/%/archive');
  $item->title('Todo');
  $item->page_callback('api_todo_archive');
  $item->page_arguments([3]);
  $item->access_callback('user_is_todo_author');
  $item->access_arguments([3]);
  $items = $item->item($items);

  return $items;
}

function user_is_todo_author($entity_id) {
  $entity_type = 'todo';
  return user_is_entity_author($entity_type, $entity_id);
}

function nytech_todo_theme($existing, $type, $theme, $path) {
  $theme = [];

  $item = new NyTechTheme('nytech_todo_listed', __DIR__);
  $theme = $item->item($theme);

  $item = new NyTechTheme('nytech_todo_view', __DIR__);
  $theme = $item->item($theme);

  return $theme;
}

function nytech_todo_preprocess_page(&$variables) {
  $current_path = current_path();

  // The no title paths
  $match = new NyTechPathMatch($current_path);
  $match->add_pattern('todos/new');
  $match->go();
  if($match->has_match) {
    $variables['title'] = '';
  }

  // + To-do paths
  $match = new NyTechPathMatch($current_path);
  $match->add_pattern('todos');
  $match->add_pattern('todos/state/*');
  $match->go();
  if($match->has_match) {
    $variables['action'] = l('<i class="fa fa-plus-circle"></i> Todo', 'todos/new', ['html' => true]);
  }

  /*
   * New to-do back
   */
  $match = new NyTechPathMatch($current_path);
  $match->add_pattern('todos/new');
  $match->go();
  if($match->has_match) {
    $variables['back'] = l('<i class="fa fa-chevron-left"></i> Back', 'todos', ['html' => true]);
  }

  /*
   * Back to "todo"
   */
  $match = new NyTechPathMatch($current_path);
  $match->add_pattern('todos/*/update');
  $match->go();
  if($match->has_match) {
    $entity_id = arg(1);
    $variables['back'] = l('<i class="fa fa-chevron-left"></i> Back', 'todos/' . $entity_id . '/view', ['html' => true]);
  }

  /*
   * Back to "todos"
   */
  $match = new NyTechPathMatch($current_path);
  $match->add_pattern('todos/new');
  $match->go();
  if($match->has_match) {
    $variables['back'] = l('<i class="fa fa-chevron-left"></i> Back', 'todos', ['html' => true]);
  }


}


function nytech_todo_entity_presave($entity, $type) {
  /*
   * If the field_related_deliverable is set then infer the related account.
   * If field_related_deliverable is not set then it is a generic 'to do' and we let it be.
   */
  if(!empty($entity->field_related_deliverable)) {
    $entity->field_related_account['und'][0]['target_id'] = $entity->field_related_deliverable['und'][0]['target_id'];
  }
}

class NyTechUsersTodos {
  public $count;
  public $limit;
  public $objects;
  public $user;

  private $entity_type;
  private $bundle;

  function __construct($limit = 25) {
    global $user;
    $this->limit = $limit;
    $this->user = $user;
    $this->count = 0;
    $this->entity_type = 'todo';
    $this->bundle = 'standard';
  }

  public function set_state($var) {
    $this->state = $var;
  }

  public function query($limit = 25) {
    if(!empty($this->state)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $this->entity_type)
        ->entityCondition('bundle', $this->bundle)
        ->propertyOrderBy('created', 'DESC')
        ->propertyCondition('status', 1, '=')
        ->propertyCondition('uid', $this->user->uid, '=')
        ->propertyCondition('state', $this->state, '=')
        ->range(0, $limit)
        ->addMetaData('account', user_load(1));

      $result = $query->execute();
      if (isset($result[$this->entity_type])) {
        $ids = array_keys($result[$this->entity_type]);
        $this->objects = entity_load($this->entity_type, $ids);
        $this->count = count($this->objects);
      }
    } else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $this->entity_type)
        ->entityCondition('bundle', $this->bundle)
        ->propertyOrderBy('created', 'DESC')
        ->propertyCondition('status', 1, '=')
        ->propertyCondition('uid', $this->user->uid, '=')
        ->range(0, $limit)
        ->addMetaData('account', user_load(1));

      $result = $query->execute();
      if (isset($result[$this->entity_type])) {
        $ids = array_keys($result[$this->entity_type]);
        $this->objects = entity_load($this->entity_type, $ids);
        $this->count = count($this->objects);
      }
    }
  }
}

class NyTechTodo {
  public $uuid;
  public $entity_id;

  public $title;
  public $state;
  public $state_output;
  public $details;
  public $details_short;

  public $created;
  public $created_pretty;
  public $created_time_ago;

  public $changed;
  public $changed_pretty;
  public $changed_time_ago;

  public $archive_url;
  public $view_url;
  public $update_url;

  public $user_id;
  public $author;

  function __construct($entity) {
    $this->entity_id = $entity->id;
    $this->user_id   = (int) $entity->uid;
    $this->uuid      = $entity->uuid;
    $this->title     = $entity->title;

    $this->set_state($entity);
    $this->set_date($entity);
    $this->set_details($entity);
    $this->set_urls();
  }

  private function set_details($entity) {
    if(!empty($entity->field_todo_details)) {
      $this->details       = $entity->field_todo_details['und'][0]['value'];
      $this->details_short = shorten($this->details, 140);
    }
  }

  private function set_state($entity) {
    $this->state = $entity->state;
    switch ($this->state) {
      case 'New':
        $output = '<span class="label label-default"><i class="fa-solid fa-circle-info"></i> ' . $this->state . '</span>';
        break;
      case 'Doing':
        $output = '<span class="label label-info"><i class="fa-solid fa-circle-check"></i> ' . $this->state . '</span>';
        break;
      case 'Done':
        $output = '<span class="label label-success"><i class="fa-solid fa-thumbs-up"></i> ' . $this->state . '</span>';
        break;
      case 'Completed':
        $output = '<span class="label label-danger"><i class="fa-solid fa-thumbs-up"></i> ' . $this->state . '</span>';
        break;
      default:
        $output = '<span class="label label-default"><i class="fa-regular fa-question"></i> ' . $this->state . '</span>';
        break;
    }
    $this->state_output = $output;
  }

  private function set_date($entity) {
    $this->created          = (int) $entity->created;
    $this->created_pretty   = date('M d Y, g:ia', $this->created);
    $this->created_time_ago = timeAgo($this->created);

    $this->changed          = (int) $entity->changed;
    $this->changed_pretty   = date('M d Y, g:ia', $this->changed);
    $this->changed_time_ago = timeAgo($this->changed);
  }

  private function set_urls() {
    $this->view_url    = drupal_get_path_alias('todos/' . $this->entity_id . '/view');
    $this->update_url  = drupal_get_path_alias('todos/' . $this->entity_id . '/update');
    $this->archive_url = drupal_get_path_alias('api/v1/todos/' . $this->entity_id . '/archive');
  }

  public function author($entity) {
    $author       = user_load($entity->uid);
    $this->author = new NyTechAccount($author);
  }

}

class NyTechTodoCreate {
  public $entity_id;
  public $entity;
  public $entity_type = 'todo';

  function __construct($values) {
    global $user;
    $edit = [
      'type' => 'standard',
      'status' => 1,
      'uid' => $user->uid,
      'title' => $values['title'],
      'state' => 'New',
    ];
    $entity = entity_create($this->entity_type, $edit);
    if(!empty($values['deliverable'])) {
      $entity->field_related_deliverable['und'][0]['target_id'] = $values['value'];
    }
    $entity->field_todo_details['und'][0]['value'] = $values['value'];
    entity_save('todo', $entity);
    $this->entity = $entity;
    $this->entity_id = $entity->id;
  }
}

class NyTechTodoUpdate {
  public $entity_id;
  public $entity;

  function __construct($values) {
    $entity = entity_load_single('todo', $values['entity_id']);
    $entity->title = shorten($values['message']);
    $entity->field_n_message['und'][0]['value'] = $values['message'];
    entity_save('todo', $entity);
    $this->entity = $entity;
    $this->entity_id = $entity->id;
  }
}

class NyTechTodosListed {
  public $count;
  public $org_id;
  public $job_id;
  public $objects;
  public $output;

  function __construct($org_id, $job_id, $objects) {
    $this->org_id = $org_id;
    $this->job_id = $job_id;
    $this->count = 0;
    if(!empty($objects)) {
      $this->objects = $objects;
      $this->count = count($this->objects);
    }
    $this->output();
  }

  private function output() {
    global $base_url;
    $output = '<h5 class="item-count">' . $this->count . ' Todos</h5>';
    if(!empty($this->objects)) {
      foreach($this->objects as $entity) {
        $array = [
          'url' => $base_url . '/' . drupal_get_path_alias('o/' . $this->org_id . '/jobs/' . $this->job_id . '/todos/' . $entity->id . '/view'),
          'org_id' => $this->org_id,
          'job_id' => $this->job_id,
          'short' => $entity->title,
          'time_ago' => timeAgo($entity->created),
          'entity' => $entity,
        ];
        $output .= theme('nytech_todo_listed', $array);
      }
    } else {
      $output = '<div class="no-items-found">Write a todo!</div>';
    }
    $this->output = '<div class="item-results"><div class="list-group">' . $output . '</div></div>';
  }


}

class NyTechUsersTodosConfig {

}
